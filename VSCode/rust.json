{
	// Place your snippets for rust here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Input": {
		"prefix": "input",
		"body": [
			"macro_rules! input {",
			"    (source = $$s:expr, $($$r:tt)*) => {",
			"        let mut iter = $$s.split_whitespace();",
			"        let mut next = || { iter.next().unwrap() };",
			"        input_inner!{next, $($$r)*}",
			"    };",
			"    ($($$r:tt)*) => {",
			"        let stdin = std::io::stdin();",
			"        let mut bytes = std::io::Read::bytes(std::io::BufReader::new(stdin.lock()));",
			"        let mut next = move || -> String{",
			"            bytes",
			"                .by_ref()",
			"                .map(|r|r.unwrap() as char)",
			"                .skip_while(|c|c.is_whitespace())",
			"                .take_while(|c|!c.is_whitespace())",
			"                .collect()",
			"        };",
			"        input_inner!{next, $($$r)*}",
			"    };",
			"}",
			"",
			"macro_rules! input_inner {",
			"    ($$next:expr) => {};",
			"    ($$next:expr, ) => {};",
			"",
			"    ($$next:expr, $$var:ident : $$t:tt $($$r:tt)*) => {",
			"        let $$var = read_value!($$next, $$t);",
			"        input_inner!{$$next $($$r)*}",
			"    };",
			"}",
			"",
			"macro_rules! read_value {",
			"    ($$next:expr, ( $($$t:tt),* )) => {",
			"        ( $(read_value!($$next, $$t)),* )",
			"    };",
			"",
			"    ($$next:expr, [ $$t:tt ; $$len:expr]) => {",
			"        (0..$$len).map(|_| read_value!($$next, $$t)).collect::<Vec<_>>()",
			"    };",
			"",
			"    ($$next:expr, chars) => {",
			"        read_value!($$next, String).chars().collect::<Vec<char>>()",
			"    };",
			"",
			"    ($$next:expr, usize1) => {",
			"        read_value!($$next, usize) - 1",
			"    };",
			"",
			"    ($$next:expr, $$t:ty) => {",
			"        $$next().parse::<$$t>().expect(\"Parse error\")",
			"    };",
			"}",
		],
		"description": "For input"
	},
}